//=========================================================================
//
//  This file was generated by Mouse 1.5 at 2012-12-19 15:49:09 GMT
//  from grammar
//    'C:\Users\dalu\workspace_indigo\test01\src\myGrammar.txt'.
//
//=========================================================================

import mouse.runtime.Source;

public class myParser extends mouse.runtime.ParserBase
{
  final mySemantics sem;
  
  //=======================================================================
  //
  //  Initialization
  //
  //=======================================================================
  //-------------------------------------------------------------------
  //  Constructor
  //-------------------------------------------------------------------
  public myParser()
    {
      sem = new mySemantics();
      sem.rule = this;
      super.sem = sem;
    }
  
  //-------------------------------------------------------------------
  //  Run the parser
  //-------------------------------------------------------------------
  public boolean parse(Source src)
    {
      super.init(src);
      sem.init();
      if (main()) return true;
      return failure();
    }
  
  //-------------------------------------------------------------------
  //  Get semantics
  //-------------------------------------------------------------------
  public mySemantics semantics()
    { return sem; }
  
  //=======================================================================
  //
  //  Parsing procedures
  //
  //=======================================================================
  //=====================================================================
  //  main = Statement+ !_ {result} ;
  //=====================================================================
  private boolean main()
    {
      begin("main");
      if (!Statement()) return reject();
      while (Statement());
      if (!aheadNot()) return reject();
      sem.result();
      return accept();
    }
  
  //=====================================================================
  //  Statement = (Text / Block / IfStatement / ElseIfStatement /
  //    ForeachStatement / SetStatement / ParamStatment / StopStatement /
  //    Reference) Spacing ;
  //=====================================================================
  private boolean Statement()
    {
      begin("Statement");
      if (!Text()
       && !Block()
       && !IfStatement()
       && !ElseIfStatement()
       && !ForeachStatement()
       && !SetStatement()
       && !ParamStatment()
       && !StopStatement()
       && !Reference()
         ) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  Text = (!"#" _)+ ;
  //=====================================================================
  private boolean Text()
    {
      begin("Text");
      if (!Text_0()) return reject();
      while (Text_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Text_0 = !"#" _
  //-------------------------------------------------------------------
  private boolean Text_0()
    {
      begin("");
      if (!aheadNot('#')) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  Block = BEGIN Expression* END ;
  //=====================================================================
  private boolean Block()
    {
      begin("Block");
      if (!BEGIN()) return reject();
      while (Expression());
      if (!END()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  IfStatement = IF LPAR Expression RPAR Statement ElseStatement? ;
  //=====================================================================
  private boolean IfStatement()
    {
      begin("IfStatement");
      if (!IF()) return reject();
      if (!LPAR()) return reject();
      if (!Expression()) return reject();
      if (!RPAR()) return reject();
      if (!Statement()) return reject();
      ElseStatement();
      return accept();
    }
  
  //=====================================================================
  //  ElseIfStatement = ELSEIF LPAR Expression RPAR Statement
  //    ElseStatement? ;
  //=====================================================================
  private boolean ElseIfStatement()
    {
      begin("ElseIfStatement");
      if (!ELSEIF()) return reject();
      if (!LPAR()) return reject();
      if (!Expression()) return reject();
      if (!RPAR()) return reject();
      if (!Statement()) return reject();
      ElseStatement();
      return accept();
    }
  
  //=====================================================================
  //  ElseStatement = ELSE Statement ;
  //=====================================================================
  private boolean ElseStatement()
    {
      begin("ElseStatement");
      if (!ELSE()) return reject();
      if (!Statement()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  ForeachStatement = FOREACH Reference IN Reference Statement ;
  //=====================================================================
  private boolean ForeachStatement()
    {
      begin("ForeachStatement");
      if (!FOREACH()) return reject();
      if (!Reference()) return reject();
      if (!IN()) return reject();
      if (!Reference()) return reject();
      if (!Statement()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  SetStatement = SET Reference EQU Expression ;
  //=====================================================================
  private boolean SetStatement()
    {
      begin("SetStatement");
      if (!SET()) return reject();
      if (!Reference()) return reject();
      if (!EQU()) return reject();
      if (!Expression()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  StopStatement = STOP ;
  //=====================================================================
  private boolean StopStatement()
    {
      begin("StopStatement");
      if (!STOP()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  ParamStatment = PARAM Reference EQU StringLiteral ;
  //=====================================================================
  private boolean ParamStatment()
    {
      begin("ParamStatment");
      if (!PARAM()) return reject();
      if (!Reference()) return reject();
      if (!EQU()) return reject();
      if (!StringLiteral()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  Reference = DOLLAR Identifier (DOT (Method / Identifier))* ;
  //=====================================================================
  private boolean Reference()
    {
      begin("Reference");
      if (!DOLLAR()) return reject();
      if (!Identifier()) return reject();
      while (Reference_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Reference_0 = DOT (Method / Identifier)
  //-------------------------------------------------------------------
  private boolean Reference_0()
    {
      begin("");
      if (!DOT()) return rejectInner();
      if (!Method()
       && !Identifier()
         ) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  Method = Identifier LPAR (Parameter (COMMA Parameter)*)? RPAR ;
  //=====================================================================
  private boolean Method()
    {
      begin("Method");
      if (!Identifier()) return reject();
      if (!LPAR()) return reject();
      Method_0();
      if (!RPAR()) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Method_0 = Parameter (COMMA Parameter)*
  //-------------------------------------------------------------------
  private boolean Method_0()
    {
      begin("");
      if (!Parameter()) return rejectInner();
      while (Method_1());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Method_1 = COMMA Parameter
  //-------------------------------------------------------------------
  private boolean Method_1()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      if (!Parameter()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  Parameter = Reference / Literal ;
  //=====================================================================
  private boolean Parameter()
    {
      begin("Parameter");
      if (Reference()) return accept();
      if (Literal()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  Expression = TRUE / FALSE / PrimaryExpression (EQU
  //    PrimaryExpression)+ / ConditionalOrExpression ;
  //=====================================================================
  private boolean Expression()
    {
      begin("Expression");
      if (TRUE()) return accept();
      if (FALSE()) return accept();
      if (Expression_0()) return accept();
      if (ConditionalOrExpression()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  Expression_0 = PrimaryExpression (EQU PrimaryExpression)+
  //-------------------------------------------------------------------
  private boolean Expression_0()
    {
      begin("");
      if (!PrimaryExpression()) return rejectInner();
      if (!Expression_1()) return rejectInner();
      while (Expression_1());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Expression_1 = EQU PrimaryExpression
  //-------------------------------------------------------------------
  private boolean Expression_1()
    {
      begin("");
      if (!EQU()) return rejectInner();
      if (!PrimaryExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  ConditionalOrExpression = ConditionalAndExpression (OROR
  //    ConditionalAndExpression)+ ;
  //=====================================================================
  private boolean ConditionalOrExpression()
    {
      begin("ConditionalOrExpression");
      if (!ConditionalAndExpression()) return reject();
      if (!ConditionalOrExpression_0()) return reject();
      while (ConditionalOrExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  ConditionalOrExpression_0 = OROR ConditionalAndExpression
  //-------------------------------------------------------------------
  private boolean ConditionalOrExpression_0()
    {
      begin("");
      if (!OROR()) return rejectInner();
      if (!ConditionalAndExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  ConditionalAndExpression = EqualityExpression (ANDAND
  //    EqualityExpression)+ ;
  //=====================================================================
  private boolean ConditionalAndExpression()
    {
      begin("ConditionalAndExpression");
      if (!EqualityExpression()) return reject();
      if (!ConditionalAndExpression_0()) return reject();
      while (ConditionalAndExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  ConditionalAndExpression_0 = ANDAND EqualityExpression
  //-------------------------------------------------------------------
  private boolean ConditionalAndExpression_0()
    {
      begin("");
      if (!ANDAND()) return rejectInner();
      if (!EqualityExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  EqualityExpression = RelationalExpression (EQUAL
  //    RelationalExpression / NOTEQUAL RelationalExpression)+ ;
  //=====================================================================
  private boolean EqualityExpression()
    {
      begin("EqualityExpression");
      if (!RelationalExpression()) return reject();
      if (!EqualityExpression_0()) return reject();
      while (EqualityExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  EqualityExpression_0 = EQUAL RelationalExpression / NOTEQUAL
  //    RelationalExpression
  //-------------------------------------------------------------------
  private boolean EqualityExpression_0()
    {
      begin("");
      if (EqualityExpression_1()) return acceptInner();
      if (EqualityExpression_2()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  EqualityExpression_1 = EQUAL RelationalExpression
  //-------------------------------------------------------------------
  private boolean EqualityExpression_1()
    {
      begin("");
      if (!EQUAL()) return rejectInner();
      if (!RelationalExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  EqualityExpression_2 = NOTEQUAL RelationalExpression
  //-------------------------------------------------------------------
  private boolean EqualityExpression_2()
    {
      begin("");
      if (!NOTEQUAL()) return rejectInner();
      if (!RelationalExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  RelationalExpression = AdditiveExpression (LT AdditiveExpression /
  //    GT AdditiveExpression / LE AdditiveExpression / GE
  //    AdditiveExpression)+ ;
  //=====================================================================
  private boolean RelationalExpression()
    {
      begin("RelationalExpression");
      if (!AdditiveExpression()) return reject();
      if (!RelationalExpression_0()) return reject();
      while (RelationalExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_0 = LT AdditiveExpression / GT
  //    AdditiveExpression / LE AdditiveExpression / GE
  //    AdditiveExpression
  //-------------------------------------------------------------------
  private boolean RelationalExpression_0()
    {
      begin("");
      if (RelationalExpression_1()) return acceptInner();
      if (RelationalExpression_2()) return acceptInner();
      if (RelationalExpression_3()) return acceptInner();
      if (RelationalExpression_4()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_1 = LT AdditiveExpression
  //-------------------------------------------------------------------
  private boolean RelationalExpression_1()
    {
      begin("");
      if (!LT()) return rejectInner();
      if (!AdditiveExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_2 = GT AdditiveExpression
  //-------------------------------------------------------------------
  private boolean RelationalExpression_2()
    {
      begin("");
      if (!GT()) return rejectInner();
      if (!AdditiveExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_3 = LE AdditiveExpression
  //-------------------------------------------------------------------
  private boolean RelationalExpression_3()
    {
      begin("");
      if (!LE()) return rejectInner();
      if (!AdditiveExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_4 = GE AdditiveExpression
  //-------------------------------------------------------------------
  private boolean RelationalExpression_4()
    {
      begin("");
      if (!GE()) return rejectInner();
      if (!AdditiveExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  AdditiveExpression = MultiplicativeExpression (PLUS
  //    MultiplicativeExpression / MINUS MultiplicativeExpression)+ ;
  //=====================================================================
  private boolean AdditiveExpression()
    {
      begin("AdditiveExpression");
      if (!MultiplicativeExpression()) return reject();
      if (!AdditiveExpression_0()) return reject();
      while (AdditiveExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  AdditiveExpression_0 = PLUS MultiplicativeExpression / MINUS
  //    MultiplicativeExpression
  //-------------------------------------------------------------------
  private boolean AdditiveExpression_0()
    {
      begin("");
      if (AdditiveExpression_1()) return acceptInner();
      if (AdditiveExpression_2()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  AdditiveExpression_1 = PLUS MultiplicativeExpression
  //-------------------------------------------------------------------
  private boolean AdditiveExpression_1()
    {
      begin("");
      if (!PLUS()) return rejectInner();
      if (!MultiplicativeExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  AdditiveExpression_2 = MINUS MultiplicativeExpression
  //-------------------------------------------------------------------
  private boolean AdditiveExpression_2()
    {
      begin("");
      if (!MINUS()) return rejectInner();
      if (!MultiplicativeExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  MultiplicativeExpression = UnaryExpression (STAR UnaryExpression /
  //    DIV UnaryExpression / MOD UnaryExpression)+ ;
  //=====================================================================
  private boolean MultiplicativeExpression()
    {
      begin("MultiplicativeExpression");
      if (!UnaryExpression()) return reject();
      if (!MultiplicativeExpression_0()) return reject();
      while (MultiplicativeExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  MultiplicativeExpression_0 = STAR UnaryExpression / DIV
  //    UnaryExpression / MOD UnaryExpression
  //-------------------------------------------------------------------
  private boolean MultiplicativeExpression_0()
    {
      begin("");
      if (MultiplicativeExpression_1()) return acceptInner();
      if (MultiplicativeExpression_2()) return acceptInner();
      if (MultiplicativeExpression_3()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  MultiplicativeExpression_1 = STAR UnaryExpression
  //-------------------------------------------------------------------
  private boolean MultiplicativeExpression_1()
    {
      begin("");
      if (!STAR()) return rejectInner();
      if (!UnaryExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  MultiplicativeExpression_2 = DIV UnaryExpression
  //-------------------------------------------------------------------
  private boolean MultiplicativeExpression_2()
    {
      begin("");
      if (!DIV()) return rejectInner();
      if (!UnaryExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  MultiplicativeExpression_3 = MOD UnaryExpression
  //-------------------------------------------------------------------
  private boolean MultiplicativeExpression_3()
    {
      begin("");
      if (!MOD()) return rejectInner();
      if (!UnaryExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  UnaryExpression = BANG UnaryExpression / PrimaryExpression ;
  //=====================================================================
  private boolean UnaryExpression()
    {
      begin("UnaryExpression");
      if (UnaryExpression_0()) return accept();
      if (PrimaryExpression()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  UnaryExpression_0 = BANG UnaryExpression
  //-------------------------------------------------------------------
  private boolean UnaryExpression_0()
    {
      begin("");
      if (!BANG()) return rejectInner();
      if (!UnaryExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  PrimaryExpression = Literal / Reference ;
  //=====================================================================
  private boolean PrimaryExpression()
    {
      begin("PrimaryExpression");
      if (Literal()) return accept();
      if (Reference()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  Identifier = !Keyword Letter LetterOrDigit* Spacing {identifier} ;
  //=====================================================================
  private boolean Identifier()
    {
      begin("Identifier");
      if (!Identifier_0()) return reject();
      if (!Letter()) return reject();
      while (LetterOrDigit());
      Spacing();
      sem.identifier();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Identifier_0 = !Keyword
  //-------------------------------------------------------------------
  private boolean Identifier_0()
    {
      begin("","not Keyword");
      if (Keyword()) return rejectNot();
      return acceptNot();
    }
  
  //=====================================================================
  //  Letter = [a-z] / [A-Z] / [_$] ;
  //=====================================================================
  private boolean Letter()
    {
      begin("Letter");
      if (nextIn('a','z')) return accept();
      if (nextIn('A','Z')) return accept();
      if (nextIn("_$")) return accept();
      return reject();
    }
  
  //=====================================================================
  //  LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] ;
  //=====================================================================
  private boolean LetterOrDigit()
    {
      begin("LetterOrDigit");
      if (nextIn('a','z')) return accept();
      if (nextIn('A','Z')) return accept();
      if (nextIn('0','9')) return accept();
      if (nextIn("_$")) return accept();
      return reject();
    }
  
  //=====================================================================
  //  Literal = (StringLiteral / DecimalFloat / DecimalNumeral / TRUE
  //    !LetterOrDigit / FALSE !LetterOrDigit / NULL !LetterOrDigit)
  //    Spacing {literalchk} ;
  //=====================================================================
  private boolean Literal()
    {
      begin("Literal");
      if (!StringLiteral()
       && !DecimalFloat()
       && !DecimalNumeral()
       && !Literal_0()
       && !Literal_1()
       && !Literal_2()
         ) return reject();
      Spacing();
      sem.literalchk();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Literal_0 = TRUE !LetterOrDigit
  //-------------------------------------------------------------------
  private boolean Literal_0()
    {
      begin("");
      if (!TRUE()) return rejectInner();
      if (!Literal_3()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Literal_1 = FALSE !LetterOrDigit
  //-------------------------------------------------------------------
  private boolean Literal_1()
    {
      begin("");
      if (!FALSE()) return rejectInner();
      if (!Literal_3()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Literal_2 = NULL !LetterOrDigit
  //-------------------------------------------------------------------
  private boolean Literal_2()
    {
      begin("");
      if (!NULL()) return rejectInner();
      if (!Literal_3()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Literal_3 = !LetterOrDigit
  //-------------------------------------------------------------------
  private boolean Literal_3()
    {
      begin("","not LetterOrDigit");
      if (LetterOrDigit()) return rejectNot();
      return acceptNot();
    }
  
  //=====================================================================
  //  DecimalFloat = DecimalNumeral "." [0-9]* {decimalFloat} ;
  //=====================================================================
  private boolean DecimalFloat()
    {
      begin("DecimalFloat");
      if (!DecimalNumeral()) return reject();
      if (!next('.')) return reject();
      while (nextIn('0','9'));
      sem.decimalFloat();
      return accept();
    }
  
  //=====================================================================
  //  DecimalNumeral = ("0" / [1-9] [0-9]*) {decimalNumeral} ;
  //=====================================================================
  private boolean DecimalNumeral()
    {
      begin("DecimalNumeral");
      if (!next('0')
       && !DecimalNumeral_0()
         ) return reject();
      sem.decimalNumeral();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  DecimalNumeral_0 = [1-9] [0-9]*
  //-------------------------------------------------------------------
  private boolean DecimalNumeral_0()
    {
      begin("");
      if (!nextIn('1','9')) return rejectInner();
      while (nextIn('0','9'));
      return acceptInner();
    }
  
  //=====================================================================
  //  StringLiteral = """ (Escape / !["\\n\r] _)* """ {stringLiteral} ;
  //=====================================================================
  private boolean StringLiteral()
    {
      begin("StringLiteral");
      if (!next('"')) return reject();
      while (StringLiteral_0());
      if (!next('"')) return reject();
      sem.stringLiteral();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  StringLiteral_0 = Escape / !["\\n\r] _
  //-------------------------------------------------------------------
  private boolean StringLiteral_0()
    {
      begin("");
      if (Escape()) return acceptInner();
      if (StringLiteral_1()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  StringLiteral_1 = !["\\n\r] _
  //-------------------------------------------------------------------
  private boolean StringLiteral_1()
    {
      begin("");
      if (!aheadNotIn("\"\\\n\r")) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  Escape = "\" [btnfr"'\] ;
  //=====================================================================
  private boolean Escape()
    {
      begin("Escape");
      if (!next('\\')) return reject();
      if (!nextIn("btnfr\"'\\")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  Spacing = ([ \t\r\n\f]+ / "##" (![\r\n] _)* [\r\n])* ;
  //=====================================================================
  private boolean Spacing()
    {
      begin("Spacing");
      while (Spacing_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Spacing_0 = [ \t\r\n\f]+ / "##" (![\r\n] _)* [\r\n]
  //-------------------------------------------------------------------
  private boolean Spacing_0()
    {
      begin("");
      if (Spacing_1()) return acceptInner();
      if (Spacing_2()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  Spacing_1 = [ \t\r\n\f]+
  //-------------------------------------------------------------------
  private boolean Spacing_1()
    {
      begin("");
      if (!nextIn(" \t\r\n\f")) return rejectInner();
      while (nextIn(" \t\r\n\f"));
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Spacing_2 = "##" (![\r\n] _)* [\r\n]
  //-------------------------------------------------------------------
  private boolean Spacing_2()
    {
      begin("");
      if (!next("##")) return rejectInner();
      while (Spacing_3());
      if (!nextIn("\r\n")) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Spacing_3 = ![\r\n] _
  //-------------------------------------------------------------------
  private boolean Spacing_3()
    {
      begin("");
      if (!aheadNotIn("\r\n")) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  BEGIN = pBEGIN Spacing ;
  //=====================================================================
  private boolean BEGIN()
    {
      begin("BEGIN");
      if (!pBEGIN()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  END = pEND Spacing ;
  //=====================================================================
  private boolean END()
    {
      begin("END");
      if (!pEND()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  TRUE = pTRUE Spacing ;
  //=====================================================================
  private boolean TRUE()
    {
      begin("TRUE");
      if (!pTRUE()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  FALSE = pFALSE Spacing ;
  //=====================================================================
  private boolean FALSE()
    {
      begin("FALSE");
      if (!pFALSE()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  NULL = pNULL Spacing ;
  //=====================================================================
  private boolean NULL()
    {
      begin("NULL");
      if (!pNULL()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  IF = pIF Spacing ;
  //=====================================================================
  private boolean IF()
    {
      begin("IF");
      if (!pIF()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  ELSE = pELSE Spacing ;
  //=====================================================================
  private boolean ELSE()
    {
      begin("ELSE");
      if (!pELSE()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  ELSEIF = pELSEIF Spacing ;
  //=====================================================================
  private boolean ELSEIF()
    {
      begin("ELSEIF");
      if (!pELSEIF()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  FOREACH = pFOREACH Spacing ;
  //=====================================================================
  private boolean FOREACH()
    {
      begin("FOREACH");
      if (!pFOREACH()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  IN = pIN Spacing ;
  //=====================================================================
  private boolean IN()
    {
      begin("IN");
      if (!pIN()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  SET = pSET Spacing ;
  //=====================================================================
  private boolean SET()
    {
      begin("SET");
      if (!pSET()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  STOP = pSTOP Spacing ;
  //=====================================================================
  private boolean STOP()
    {
      begin("STOP");
      if (!pSTOP()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  PARAM = pPARAM Spacing ;
  //=====================================================================
  private boolean PARAM()
    {
      begin("PARAM");
      if (!pPARAM()) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  LBRK = "[" Spacing ;
  //=====================================================================
  private boolean LBRK()
    {
      begin("LBRK");
      if (!next('[')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  LPAR = "(" Spacing ;
  //=====================================================================
  private boolean LPAR()
    {
      begin("LPAR");
      if (!next('(')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  LWING = "{" Spacing ;
  //=====================================================================
  private boolean LWING()
    {
      begin("LWING");
      if (!next('{')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  RBRK = "]" Spacing ;
  //=====================================================================
  private boolean RBRK()
    {
      begin("RBRK");
      if (!next(']')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  RPAR = ")" Spacing ;
  //=====================================================================
  private boolean RPAR()
    {
      begin("RPAR");
      if (!next(')')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  RWING = "}" Spacing ;
  //=====================================================================
  private boolean RWING()
    {
      begin("RWING");
      if (!next('}')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  DOLLAR = "$" Spacing ;
  //=====================================================================
  private boolean DOLLAR()
    {
      begin("DOLLAR");
      if (!next('$')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  EQU = "=" Spacing ;
  //=====================================================================
  private boolean EQU()
    {
      begin("EQU");
      if (!next('=')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  OROR = "||" Spacing ;
  //=====================================================================
  private boolean OROR()
    {
      begin("OROR");
      if (!next("||")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  ANDAND = "&&" Spacing ;
  //=====================================================================
  private boolean ANDAND()
    {
      begin("ANDAND");
      if (!next("&&")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  EQUAL = "==" Spacing ;
  //=====================================================================
  private boolean EQUAL()
    {
      begin("EQUAL");
      if (!next("==")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  NOTEQUAL = "!=" Spacing ;
  //=====================================================================
  private boolean NOTEQUAL()
    {
      begin("NOTEQUAL");
      if (!next("!=")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  LT = "<" ![=<] Spacing ;
  //=====================================================================
  private boolean LT()
    {
      begin("LT");
      if (!next('<')) return reject();
      if (!aheadNotIn("=<")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  GT = ">" ![=>] Spacing ;
  //=====================================================================
  private boolean GT()
    {
      begin("GT");
      if (!next('>')) return reject();
      if (!aheadNotIn("=>")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  LE = "<=" Spacing ;
  //=====================================================================
  private boolean LE()
    {
      begin("LE");
      if (!next("<=")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  GE = ">=" Spacing ;
  //=====================================================================
  private boolean GE()
    {
      begin("GE");
      if (!next(">=")) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  PLUS = "+" Spacing ;
  //=====================================================================
  private boolean PLUS()
    {
      begin("PLUS");
      if (!next('+')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  MINUS = "-" Spacing ;
  //=====================================================================
  private boolean MINUS()
    {
      begin("MINUS");
      if (!next('-')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  STAR = "*" Spacing ;
  //=====================================================================
  private boolean STAR()
    {
      begin("STAR");
      if (!next('*')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  DIV = "/" Spacing ;
  //=====================================================================
  private boolean DIV()
    {
      begin("DIV");
      if (!next('/')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  MOD = "%" Spacing ;
  //=====================================================================
  private boolean MOD()
    {
      begin("MOD");
      if (!next('%')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  BANG = "!" Spacing ;
  //=====================================================================
  private boolean BANG()
    {
      begin("BANG");
      if (!next('!')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  DOT = "." Spacing ;
  //=====================================================================
  private boolean DOT()
    {
      begin("DOT");
      if (!next('.')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  COMMA = "," Spacing ;
  //=====================================================================
  private boolean COMMA()
    {
      begin("COMMA");
      if (!next(',')) return reject();
      Spacing();
      return accept();
    }
  
  //=====================================================================
  //  pBEGIN = "#begin" ;
  //=====================================================================
  private boolean pBEGIN()
    {
      begin("pBEGIN");
      if (!next("#begin")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pEND = "#end" ;
  //=====================================================================
  private boolean pEND()
    {
      begin("pEND");
      if (!next("#end")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pTRUE = "#true" ;
  //=====================================================================
  private boolean pTRUE()
    {
      begin("pTRUE");
      if (!next("#true")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pFALSE = "#false" ;
  //=====================================================================
  private boolean pFALSE()
    {
      begin("pFALSE");
      if (!next("#false")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pNULL = "#null" ;
  //=====================================================================
  private boolean pNULL()
    {
      begin("pNULL");
      if (!next("#null")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pIF = "#if" ;
  //=====================================================================
  private boolean pIF()
    {
      begin("pIF");
      if (!next("#if")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pELSE = "#else" ;
  //=====================================================================
  private boolean pELSE()
    {
      begin("pELSE");
      if (!next("#else")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pELSEIF = "#elseif" ;
  //=====================================================================
  private boolean pELSEIF()
    {
      begin("pELSEIF");
      if (!next("#elseif")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pFOREACH = "#foreach" ;
  //=====================================================================
  private boolean pFOREACH()
    {
      begin("pFOREACH");
      if (!next("#foreach")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pIN = "in" ;
  //=====================================================================
  private boolean pIN()
    {
      begin("pIN");
      if (!next("in")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pSET = "#set" ;
  //=====================================================================
  private boolean pSET()
    {
      begin("pSET");
      if (!next("#set")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pSTOP = "#stop" ;
  //=====================================================================
  private boolean pSTOP()
    {
      begin("pSTOP");
      if (!next("#stop")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  pPARAM = "#param" ;
  //=====================================================================
  private boolean pPARAM()
    {
      begin("pPARAM");
      if (!next("#param")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  Keyword = (pBEGIN / pEND / pTRUE / pFALSE / pNULL / pIF / pELSE /
  //    pELSEIF / pFOREACH / pIN / pSET / pPARAM / pSTOP / "#macro")
  //    !LetterOrDigit ;
  //=====================================================================
  private boolean Keyword()
    {
      begin("Keyword");
      if (!pBEGIN()
       && !pEND()
       && !pTRUE()
       && !pFALSE()
       && !pNULL()
       && !pIF()
       && !pELSE()
       && !pELSEIF()
       && !pFOREACH()
       && !pIN()
       && !pSET()
       && !pPARAM()
       && !pSTOP()
       && !next("#macro")
         ) return reject();
      if (!Literal_3()) return reject();
      return accept();
    }
  
}
