//=========================================================================
//
//  This skeleton was generated by Mouse 1.5 at 2012-12-19 15:49:09 GMT
//  from grammar
//    'C:\Users\dalu\workspace_indigo\test01\src\myGrammar.txt'.
//
//=========================================================================

class mySemantics extends mouse.runtime.SemanticsBase
{
	  Node tree;
	
	//-------------------------------------------------------------------
  //  main = Statement+ !_
  //-------------------------------------------------------------------
  void result()
    {}
  
  //-------------------------------------------------------------------
  //  Identifier = !Keyword Letter LetterOrDigit* Spacing
  //-------------------------------------------------------------------
  void identifier()
    {}
  
  //-------------------------------------------------------------------
  //  Literal = (StringLiteral / DecimalFloat / DecimalNumeral / TRUE
  //    !LetterOrDigit / FALSE !LetterOrDigit / NULL !LetterOrDigit)
  //    Spacing
  //-------------------------------------------------------------------
  void literalchk()
    {
      int n = rhsSize();
      Node nd = null;
      for (int i=0;i<n;i++){
			nd = (Node)rhs(i).get();
			if(nd==null){
				if(lhs().text().equals("#true"))		nd=new BooleanLiteralNode(true);
				else if(lhs().text().equals("#false"))	nd=new BooleanLiteralNode(false);
				else if(lhs().text().equals("#null"))	nd=new NullNode();
			}
      }
      lhs().put(nd);
	}
  
  //-------------------------------------------------------------------
  //  DecimalFloat = DecimalNumeral "." [0-9]*
  //-------------------------------------------------------------------
  void decimalFloat()
    {
	lhs().put(new DecimalFloatLiteralNode(Double.parseDouble(lhs().text())));
    }
  
  //-------------------------------------------------------------------
  //  DecimalNumeral = "0" / [1-9] [0-9]*
  //-------------------------------------------------------------------
  void decimalNumeral()
    {
	lhs().put(new DecimalLiteralNode(Integer.parseInt(lhs().text())));
    }
  
  //-------------------------------------------------------------------
  //  StringLiteral = """ (Escape / !["\\n\r] _)* """
  //-------------------------------------------------------------------
  void stringLiteral()
    {
	lhs().put(new StringLiteralNode(lhs().text()));
    }
  
}
